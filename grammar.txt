<program> -> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> -> <moduleDeclaration><moduleDeclarations>
<moduleDeclarations> -> @
<moduleDeclaration> -> DECLARE MODULE ID SEMICOL
<otherModules> -> <module> <otherModules>
<otherModules> -> @
<driverModule> -> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> -> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> -> RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> -> @
<input_plist> -> ID COLON <dataType> <N1>
<N1> -> COMMA ID COLON <dataType> <N1>
<N1> -> @
<output_plist> -> ID COLON <type> <N2>
<N2> -> COMMA ID COLON <type> <N2>
<N2> -> @
<range_arrays> -> <index_arr> RANGEOP <index_arr>
<dataType> -> ARRAY SQBO <range_arrays> SQBC OF <type>
<dataType> -> INTEGER
<dataType> -> REAL
<dataType> -> BOOLEAN
<type> -> INTEGER
<type> -> REAL
<type> -> BOOLEAN
<moduleDef> -> START <statements> END
<statements> -> <statement><statements>
<statements> -> @
<statement> -> <ioStmt>
<statement> -> <simpleStmt>
<statement> -> <declareStmt>
<statement> -> <conditionalStmt>
<statement> -> <iterativeStmt>
<ioStmt> -> GET_VALUE BO ID BC SEMICOL
<ioStmt> -> PRINT BO <var_print> BC SEMICOL
<N14> -> NUM
<N14> -> RNUM
<var_print> -> PLUS <N14>
<var_print> -> MINUS <N14>
<var_print> -> <N14>
<var_print> -> ID <P1>
<var_print> -> <boolConstt>
<P1> -> SQBO <index_arr> SQBC
<P1> -> @
<simpleStmt> -> <assignmentStmt>
<simpleStmt> -> <moduleReuseStmt>
<assignmentStmt> -> ID <whichStmt>
<whichStmt> -> <lvalueIDStmt>
<whichStmt> -> <lvalueARRStmt>
<lvalueIDStmt> -> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> -> SQBO <element_index_with_expressions> SQBC ASSIGNOP <expression> SEMICOL
<index_arr> -> <sign> <new_index>
<new_index> -> NUM
<new_index> -> ID
<sign> -> PLUS
<sign> -> MINUS
<sign> -> @
<moduleReuseStmt> -> <optional> USE MODULE ID WITH PARAMETERS <actual_para_list> SEMICOL
<actual_para_list> -> <singular_para_list> <N12>
<N12> -> COMMA <singular_para_list> <N12>
<N12> -> @
<singular_para_list> -> <boolConstt>
<singular_para_list> -> PLUS <N13>
<singular_para_list> -> MINUS <N13>
<singular_para_list> -> <N13>
<N13> -> NUM
<N13> -> RNUM
<N13> -> ID <N11>
<N11> -> SQBO <element_index_with_expressions> SQBC
<N11> -> @
<optional> -> SQBO <idList> SQBC ASSIGNOP
<optional> -> @
<idList> -> ID <N3>
<N3> -> COMMA ID <N3>
<N3> -> @
<expression> -> <arithmeticOrBooleanExp>
<expression> -> <U>
<U> -> <op1> <new_NT>
<new_NT> -> BO <arithmeticExpr> BC
<new_NT> -> <var_id_num>
<arithmeticOrBooleanExp> -> <AnyTerm> <N7>
<N7> -> <logicalOp> <AnyTerm> <N7>
<N7> -> @
<AnyTerm> -> <arithmeticExpr> <N8>
<boolConstt> -> TRUE
<boolConstt> -> FALSE
<N8> -> <relationalOp> <arithmeticExpr>
<N8> -> @
<arithmeticExpr> -> <term> <N4>
<N4> -> <op1> <term> <N4>
<N4> -> @
<term> -> <factor> <N5>
<N5> -> <op2> <factor> <N5>
<N5> -> @
<factor> -> NUM
<factor> -> <boolConstt>
<factor> -> ID <N11>
<factor> -> RNUM
<factor> -> BO <arithmeticOrBooleanExp> BC
<array_element> -> ID SQBO <element_index_with_expressions> SQBC
<element_index_with_expressions> -> <arrExpr>
<element_index_with_expressions> -> PLUS <new_index>
<element_index_with_expressions> -> MINUS <new_index>
<arrExpr> -> <arrTerm> <arr_N4> 
<arr_N4> -> <op1> <arrTerm> <arr_N4>
<arr_N4> -> @
<arrTerm> -> <arrFactor> <arr_N5>
<arr_N5> -> <op2> <arrFactor> <arr_N5>
<arr_N5> -> @
<arrFactor> -> ID
<arrFactor> -> NUM
<arrFactor> -> <boolConstt>
<arrFactor> -> BO <arrExpr> BC
<var_id_num> -> ID
<var_id_num> -> NUM
<var_id_num> -> RNUM
<op1> -> PLUS
<op1> -> MINUS
<op2> -> MUL
<op2> -> DIV
<logicalOp> -> AND
<logicalOp> -> OR
<relationalOp> -> LT
<relationalOp> -> LE
<relationalOp> -> GT
<relationalOp> -> GE
<relationalOp> -> EQ
<relationalOp> -> NE
<declareStmt> -> DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt> -> SWITCH BO ID BC START <caseStmts> <default> END
<caseStmts> -> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> -> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> -> @
<value> -> NUM
<value> -> TRUE
<value> -> FALSE
<default> -> DEFAULT COLON <statements> BREAK SEMICOL
<default> -> @
<iterativeStmt> -> FOR BO ID IN <range_for_loop> BC START <statements> END
<iterativeStmt> -> WHILE BO <arithmeticOrBooleanExp> BC START <statements> END
<range_for_loop> -> <index_for_loop> RANGEOP <index_for_loop>
<index_for_loop> -> <sign_for_loop> <new_index_for_loop>
<new_index_for_loop> -> NUM
<sign_for_loop> -> PLUS
<sign_for_loop> -> MINUS
<sign_for_loop> -> @